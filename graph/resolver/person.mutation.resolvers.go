package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/romik1505/userDetailsService/graph"
	"github.com/romik1505/userDetailsService/graph/model"
	"github.com/romik1505/userDetailsService/internal/common"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, person common.CreatePersonRequest) (*model.CreatePersonPayload, error) {
	err := r.PersonService.CreatePersonPushMessage(ctx, person)
	if err != nil {
		return nil, fmt.Errorf("CreatePerson: %v", err)
	}
	return &model.CreatePersonPayload{
		Status: "ok",
	}, nil
}

// EditPerson is the resolver for the editPerson field.
func (r *mutationResolver) EditPerson(ctx context.Context, person common.Person) (*model.EditPersonPayload, error) {
	err := r.PersonService.UpdatePerson(ctx, &person)
	if err != nil {
		return nil, fmt.Errorf("EditPerson: %v", err)
	}
	return &model.EditPersonPayload{
		Person: &person,
	}, nil
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id int) (*model.DeletePersonPayload, error) {
	err := r.PersonService.DeletePerson(ctx, int64(id))
	if err != nil {
		return nil, fmt.Errorf("DeletePerson: %v", err)
	}
	return &model.DeletePersonPayload{
		Status: "ok",
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
