// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/romik1505/userDetailsService/internal/domain"
)

// MockPersons is a mock of Persons interface.
type MockPersons struct {
	ctrl     *gomock.Controller
	recorder *MockPersonsMockRecorder
}

// MockPersonsMockRecorder is the mock recorder for MockPersons.
type MockPersonsMockRecorder struct {
	mock *MockPersons
}

// NewMockPersons creates a new mock instance.
func NewMockPersons(ctrl *gomock.Controller) *MockPersons {
	mock := &MockPersons{ctrl: ctrl}
	mock.recorder = &MockPersonsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersons) EXPECT() *MockPersonsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersons) Create(ctx context.Context, person *domain.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPersonsMockRecorder) Create(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersons)(nil).Create), ctx, person)
}

// Delete mocks base method.
func (m *MockPersons) Delete(ctx context.Context, id int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonsMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersons)(nil).Delete), ctx, id)
}

// List mocks base method.
func (m *MockPersons) List(ctx context.Context, filter domain.ListPersonsFilter) ([]domain.Person, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPersonsMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersons)(nil).List), ctx, filter)
}

// Update mocks base method.
func (m *MockPersons) Update(ctx context.Context, person *domain.Person, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, person}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPersonsMockRecorder) Update(ctx, person interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, person}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersons)(nil).Update), varargs...)
}
